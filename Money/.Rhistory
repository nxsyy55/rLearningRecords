library(likert)
library(ggthemes)
# Here I flip the scoring
ltep[,13:19] = sapply(ltep[,13:19], function (x) 8 - x)
deal.w.esources = likert(ltep[,13:19])
summary(deal.w.esources)
plot(deal.w.esources, text.size=6, text.color="black") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold")) + ggtitle("What guidelines should Ontario use\n for its future mix of energy sources?")
library(plyr)
# following is a lot of boring code where I
# generate numerous data frames that contain percent of
# respondents who agree with the statement by their rated
# importance of Nuclear vs. Green Energy
# Here's the nuclear section
self.sustaining.region.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$A.region.should.be.responsible.for.generating.at.least.some.of.its.own.power. == "Agree", na.rm=TRUE))
self.sustaining.region.by.nuke = self.sustaining.region.by.nuke[1:7,]
region.buy.power.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$Regions.should.have.the.option.to.buy.all.of.their.power.from.sources.in.another.region..if.the.power.is.available. == "Agree", na.rm=TRUE))
region.buy.power.by.nuke = region.buy.power.by.nuke[1:7,]
region.resp.for.growing.demand.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$If.a.region.s.power.demand.is.growing..it.should.be.responsible.for.building.the.generation.or.transmission.to.supply.that.it.needs. == "Agree", na.rm=TRUE))
region.resp.for.growing.demand.by.nuke = region.resp.for.growing.demand.by.nuke[1:7,]
regions.make.cons.first.priority.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$Regions.should.make.conservation.their.first.priority.to.reduce.the.need.for.new.supply. == "Agree", na.rm=TRUE))
regions.make.cons.first.priority.by.nuke = regions.make.cons.first.priority.by.nuke[1:7,]
# Here's the green energy section
self.sustaining.region.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$A.region.should.be.responsible.for.generating.at.least.some.of.its.own.power. == "Agree", na.rm=TRUE))
self.sustaining.region.by.green = self.sustaining.region.by.green[1:7,]
region.buy.power.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$Regions.should.have.the.option.to.buy.all.of.their.power.from.sources.in.another.region..if.the.power.is.available. == "Agree", na.rm=TRUE))
region.buy.power.by.green= region.buy.power.by.green[1:7,]
region.resp.for.growing.demand.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$If.a.region.s.power.demand.is.growing..it.should.be.responsible.for.building.the.generation.or.transmission.to.supply.that.it.needs. == "Agree", na.rm=TRUE))
region.resp.for.growing.demand.by.green = region.resp.for.growing.demand.by.green[1:7,]
regions.make.cons.first.priority.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$Regions.should.make.conservation.their.first.priority.to.reduce.the.need.for.new.supply. == "Agree", na.rm=TRUE))
regions.make.cons.first.priority.by.green = regions.make.cons.first.priority.by.green[1:7,]
# in this section I alternate between getting each data frame ready for plotting
# and obviously plotting the data frame.  I liked the yellow and green that I used in the plot
# to represent Nuclear vs. Green energy :)
library(ggplot2)
library(scales)
self.sustaining.region = rbind(data.frame(Importance=seq(1,7),Pct.Agree=self.sustaining.region.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=self.sustaining.region.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(self.sustaining.region, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("A Region Should be Responsible for Generating at Least Some of Its Own Power\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
region.buy.power = rbind(data.frame(Importance=seq(1,7),Pct.Agree=region.buy.power.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=region.buy.power.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(region.buy.power, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("Regions Should Have the Option to Buy All of their Power\nfrom Sources in Another Region if Available\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
region.resp.for.growing.demand = rbind(data.frame(Importance=seq(1,7),Pct.Agree=region.resp.for.growing.demand.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=region.resp.for.growing.demand.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(region.resp.for.growing.demand, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("If a Region's Power Demand is Growing\nIt Should be Responsible for Building the Transmission/Supply it Needs\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
regions.make.cons.first.priority = rbind(data.frame(Importance=seq(1,7),Pct.Agree=regions.make.cons.first.priority.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=regions.make.cons.first.priority.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(regions.make.cons.first.priority, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("Regions Should Make Conservation Their First Priority \nto Reduce the Need for New Supply\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
ltep = read.csv("ltep-survey-results-all.csv")
library(likert)
library(ggthemes)
# Here I flip the scoring
ltep[,13:19] = sapply(ltep[,13:19], function (x) 8 - x)
deal.w.esources = likert(ltep[,13:19])
summary(deal.w.esources)
plot(deal.w.esources, text.size=6, text.color="black") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold")) + ggtitle("What guidelines should Ontario use\n for its future mix of energy sources?")
library(plyr)
# following is a lot of boring code where I
# generate numerous data frames that contain percent of
# respondents who agree with the statement by their rated
# importance of Nuclear vs. Green Energy
# Here's the nuclear section
self.sustaining.region.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$A.region.should.be.responsible.for.generating.at.least.some.of.its.own.power. == "Agree", na.rm=TRUE))
self.sustaining.region.by.nuke = self.sustaining.region.by.nuke[1:7,]
region.buy.power.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$Regions.should.have.the.option.to.buy.all.of.their.power.from.sources.in.another.region..if.the.power.is.available. == "Agree", na.rm=TRUE))
region.buy.power.by.nuke = region.buy.power.by.nuke[1:7,]
region.resp.for.growing.demand.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$If.a.region.s.power.demand.is.growing..it.should.be.responsible.for.building.the.generation.or.transmission.to.supply.that.it.needs. == "Agree", na.rm=TRUE))
region.resp.for.growing.demand.by.nuke = region.resp.for.growing.demand.by.nuke[1:7,]
regions.make.cons.first.priority.by.nuke = ddply(ltep, .(Nuclear.power.is.our.best.option.), function (x) mean(x$Regions.should.make.conservation.their.first.priority.to.reduce.the.need.for.new.supply. == "Agree", na.rm=TRUE))
regions.make.cons.first.priority.by.nuke = regions.make.cons.first.priority.by.nuke[1:7,]
# Here's the green energy section
self.sustaining.region.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$A.region.should.be.responsible.for.generating.at.least.some.of.its.own.power. == "Agree", na.rm=TRUE))
self.sustaining.region.by.green = self.sustaining.region.by.green[1:7,]
region.buy.power.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$Regions.should.have.the.option.to.buy.all.of.their.power.from.sources.in.another.region..if.the.power.is.available. == "Agree", na.rm=TRUE))
region.buy.power.by.green= region.buy.power.by.green[1:7,]
region.resp.for.growing.demand.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$If.a.region.s.power.demand.is.growing..it.should.be.responsible.for.building.the.generation.or.transmission.to.supply.that.it.needs. == "Agree", na.rm=TRUE))
region.resp.for.growing.demand.by.green = region.resp.for.growing.demand.by.green[1:7,]
regions.make.cons.first.priority.by.green = ddply(ltep, .(Green.energy..e.g...wind..solar..is.our.best.option.), function (x) mean(x$Regions.should.make.conservation.their.first.priority.to.reduce.the.need.for.new.supply. == "Agree", na.rm=TRUE))
regions.make.cons.first.priority.by.green = regions.make.cons.first.priority.by.green[1:7,]
# in this section I alternate between getting each data frame ready for plotting
# and obviously plotting the data frame.  I liked the yellow and green that I used in the plot
# to represent Nuclear vs. Green energy :)
library(ggplot2)
library(scales)
self.sustaining.region = rbind(data.frame(Importance=seq(1,7),Pct.Agree=self.sustaining.region.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=self.sustaining.region.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(self.sustaining.region, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("A Region Should be Responsible for Generating at Least Some of Its Own Power\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
region.buy.power = rbind(data.frame(Importance=seq(1,7),Pct.Agree=region.buy.power.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=region.buy.power.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(region.buy.power, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("Regions Should Have the Option to Buy All of their Power\nfrom Sources in Another Region if Available\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
region.resp.for.growing.demand = rbind(data.frame(Importance=seq(1,7),Pct.Agree=region.resp.for.growing.demand.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=region.resp.for.growing.demand.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(region.resp.for.growing.demand, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("If a Region's Power Demand is Growing\nIt Should be Responsible for Building the Transmission/Supply it Needs\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
regions.make.cons.first.priority = rbind(data.frame(Importance=seq(1,7),Pct.Agree=regions.make.cons.first.priority.by.nuke$V1, Energy=rep("Nuclear Energy",7)), data.frame(Importance=seq(1,7),Pct.Agree=regions.make.cons.first.priority.by.green$V1, Energy=rep("Green Energy", 7)))
ggplot(regions.make.cons.first.priority, aes(x=as.factor(Importance), y=Pct.Agree, fill=Energy)) + geom_bar(stat="identity",width=.5) + scale_y_continuous(labels=percent, name="Percent Who Agree") + scale_x_discrete(name="Rated Level of Importance (1-7 = Low to High)") +  facet_grid(~Energy) + scale_fill_manual(values=c("khaki1","forest green")) + ggtitle("Regions Should Make Conservation Their First Priority \nto Reduce the Need for New Supply\n(Agreement by Rated Importance of Nuclear vs. Green Energy)") + theme(axis.text.x=element_text(colour="black", face="bold", size=14), axis.text.y=element_text(colour="black", face="bold", size=14), axis.title.x=element_text(colour="black", face="bold", size=14), axis.title.y=element_text(colour="black", face="bold", size=14), plot.title=element_text(size=18, face="bold"), strip.text=element_text(size=14), legend.title=element_text(size=14), legend.text=element_text(size=14))
n <- 10000
f <- function(x) x^2
plot(runif(n), runif(n), col='blue', pch=20)
curve(f, 0,1, n=100, col='white', add=TRUE)
n <- 100000
f <- function(x) x^2
plot(runif(n), runif(n), col='blue', pch=20)
curve(f, 0,1, n=100, col='white', add=TRUE)
n <- 100000
f <- function(x) x^2
plot(runif(n), runif(n), col='blue', pch=20)
curve(f, 0,1, n=100, col='white', add=TRUE)
install_github('rCharts', 'ramnathv')
library(devtool)
library(devtools)
install_github('rCharts', 'ramnathv')
install_github('slidify', 'ramnathv')
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
part <- list(x0=0,y0=0,x1=0,y1=1,
branch1=NULL,branch2=NULL,extend=NULL,
lwd=1,depth=0,col='springgreen')
par(mfrow=c(1,1),mar=c(5, 4, 4, 2) + 0.1)
segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
part
segplot(part)
install.packages("googleVis")
test <- function(x) {
if( x== 1) x^2
test(x-1)
}
test(1)
test(2)
test <- function(x) {
if(x==1) return(1)
test(x-1)
}
test(1)
test(2)
test <- function(x) {
if(x==1) return(1)
x + test(x-1)
}
test(2)
test(5)
test(6)
test(8)
test(9)
test(10)
test(100)
install.packages("sysfonts")
library(sysfronts)
library(sysfonts)
?sysfonts
help(sysfonts)
font.families()
font.files()
font.families()
install.packages("showtext")
library("showtext", lib.loc="F:/R/R-3.1.0/library")
showtext.begin()
showtext.begin
?text
segplot
str(part)
segplot(test)
i <- 1:10
paste0('year',i)
paste0('year',i,':')
df <- data.frame(year = year, annual.incoming = c(), annual.incoming.with.rates = c())
paste0('year',i,':') ->year
df <- data.frame(year = year, annual.incoming = c(), annual.incoming.with.rates = c())
df <- data.frame(year = year, annual.incoming , annual.incoming.with.rates )
df <- data.frame(year = year)
df
test <- function(x) print(x)
test <- function(x) print(df$x)
test('year')
test(year)
test <- function(x) print(df)
test()
test(1)
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500，len=10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
Year <- paste0('Year', 1:len)
Rate <- rate1 - rate2
yr.inc <- (year-1)*inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table<-data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned<-data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output<-list(table, lifetime.earned)
return(output)
}
cal <- function(ini = 3500，len=10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year<-1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
cal <- function(ini = 3500，len=10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year<-1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
cal <- function(ini = 3500，len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
cal <- function(ini=3500，len=10,inc=500,rate=.06){
year<-1:len
yr.inc<-(year-1)*inc
salary<-ini+yr.inc
annual.incoming<-salary*12
actual.amt<-12*salary*(1+rate)^(0:(len-1))
table<-data.frame(year=year,salary=salary,annual.incoming=annual.incoming,act.amt= actual.amt)
worktime.inc<-data.frame(no.infloation=sum(table$annual.incoming),infloation=sum(actual.amt))
output<-list(table,worktime.inc)
return(output)
}
cal <- function(ini=3500，len=10,inc=500,rate=.06){
year<-1:len
yr.inc<-(year-1)*inc
salary<-ini+yr.inc
annual.incoming<-salary*12
actual.amt<-12*salary*(1+rate)^(0:(len-1))
table<-data.frame(year=year,salary=salary,annual.incoming=annual.incoming,act.amt= actual.amt)
worktime.inc<-data.frame(no.infloation=sum(table$annual.incoming),infloation=sum(actual.amt))
output<-list(table,worktime.inc)
return(output)
}
cal <- function(ini=3500，len=10,inc=500,rate=.06){
year<-1:len
yr.inc<-(year-1)*inc
salary<-ini+yr.inc
annual.incoming<-salary*12
actual.amt<-12*salary*(1+rate)^(0:(len-1))
table<-data.frame(year=year,salary=salary,annual.incoming=annual.incoming,act.amt= actual.amt)
worktime.inc<-data.frame(no.infloation=sum(table$annual.incoming),infloation=sum(actual.amt))
output<-list(table,worktime.inc)
return(output)
}
len
?len
cal <- function(ini=3500，len=10,inc=500,rate=.06){
year<-1:len
yr.inc<-(year-1)*inc
salary<-ini+yr.inc
annual.incoming<-salary*12
actual.amt<-12*salary*(1+rate)^(0:(len-1))
table<-data.frame(year=year,salary=salary,annual.incoming=annual.incoming,act.amt= actual.amt)
worktime.inc<-data.frame(no.infloation=sum(table$annual.incoming),infloation=sum(actual.amt))
output<-list(table,worktime.inc)
return(output)
}
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500，len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500，len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500，len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500, len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, salary = salary,
annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
cal()
# @2014/7/13 把这个做成了一个shiny app
cal <- function(ini = 3500, len = 10, inc = 500, rate1 = .035, rate2 = 0.033){
# rate1: the interest rate
# rate2: the inflation rate
year <- 1:len
Year <- paste0('Year', year)
Rate <- rate1 - rate2
yr.inc <- (year-1) * inc
annual.incoming <- (ini+yr.inc) * 12 # PVs
actual.amt <- annual.incoming * (1+Rate)^(0:(len-1)) # Fvs w/ rates
table <- data.frame(year = Year, annual.incoming = annual.incoming,
act.amt = actual.amt)
lifetime.earned <- data.frame(without.infloation = sum(annual.incoming),
with.infloation = sum(actual.amt))
output <- list(table, lifetime.earned)
return(output)
}
cal()
library(lattice)
?xyploy
?xyplot
xyplot(car)
car
cars
xyplot(cars)
xyplot(cars[,1],cars[,2])
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
update(trellis.last.object(),
strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
par.strip.text = list(cex = 0.75),
aspect = "iso")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?axis
?text()
?panel.lmline
library(ggplot2)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
require(ggplot2)
require(nlme)
p=ggplot(mtcars)
summary(p)
p=ggplot(mtcars,aes(x=mpg,y=wt))
p
p+geom_point()
p+geom_point(aes(y=disp))
p+geom_point(aes(color="darkblue"))
p+geom_point(color="steelblue")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?cut2
training
head(mixtures)
plot(1:dim(mixtures)[1],mixtures$CompressiveStrength, )
plot(1:dim(mixtures)[1],mixtures$CompressiveStrength, typle = 'l')
plot(1:dim(mixtures)[1],mixtures$CompressiveStrength, type = 'l')
12+7*15
pwd()
file.list()
dir()
setwd('./shiny//Money')
